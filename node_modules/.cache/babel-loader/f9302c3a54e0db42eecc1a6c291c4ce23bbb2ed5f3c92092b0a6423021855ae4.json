{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nconst AudioRecorder = () => {\n  _s();\n  const [audioContext, setAudioContext] = useState(null);\n  const [recording, setRecording] = useState(false);\n  const [chunks, setChunks] = useState([]);\n  let timer;\n  let lastAudioDetectedTime;\n  useEffect(() => {\n    const startListening = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          audio: true\n        }); // 사용자의 마이크 액세스 요청\n        const audioCtx = new AudioContext(); // 오디오 컨텍스트 생성. 오디오를 처리하고 조작하는 데 사용\n        setAudioContext(audioCtx);\n        audioCtx.audioWorklet.addModule('audioProcessor.js').then(() => {\n          // 파일을 오디오 워크렛으로 추가\n          const workletNode = new AudioWorkletNode(audioCtx, 'audio-processor'); // 노드가 오디어 데이터를 실시간으로 처리\n          const source = audioCtx.createMediaStreamSource(stream); // 오디오 스트림을 소스로 사용하여 컨텍스트에 연결할 오디오 소스 생성\n          source.connect(workletNode); // 오디오 소스를 오디오 프로세서 노드에 연결\n          workletNode.connect(audioCtx.destination); // 오디오 프로세서를 오디오 컨텍스트의 대상에 연결. 오디오 처리 결과가 스피커로 출력\n        });\n      } catch (error) {\n        if (error.name === 'NotAllowedError' || error.name === 'AbortError') {\n          // 사용자가 액세스를 거부하거나 취소한 경우 처리할 로직\n          console.error('User denied microphone access');\n          alert('Please allow access to microphone to record audio.');\n        } else {\n          console.error('Error accessing microphone:', error);\n        }\n      }\n    };\n    startListening();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return;\n};\n_s(AudioRecorder, \"L9iCuPZtK+h+KWlI2qFvdkAI/Ts=\");\n_c = AudioRecorder;\nexport default AudioRecorder;\nvar _c;\n$RefreshReg$(_c, \"AudioRecorder\");","map":{"version":3,"names":["React","useEffect","useState","AudioRecorder","_s","audioContext","setAudioContext","recording","setRecording","chunks","setChunks","timer","lastAudioDetectedTime","startListening","stream","navigator","mediaDevices","getUserMedia","audio","audioCtx","AudioContext","audioWorklet","addModule","then","workletNode","AudioWorkletNode","source","createMediaStreamSource","connect","destination","error","name","console","alert","_c","$RefreshReg$"],"sources":["/Users/chae-jeongwon/github/kiosk/src/component/AudioRecorder.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nconst AudioRecorder = () => {\n  const [audioContext, setAudioContext] = useState(null);\n  const [recording, setRecording] = useState(false);\n  const [chunks, setChunks] = useState([]);\n  let timer;\n  let lastAudioDetectedTime;\n\n  useEffect(() => {\n    const startListening = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          audio: true,\n        }); // 사용자의 마이크 액세스 요청\n        const audioCtx = new AudioContext(); // 오디오 컨텍스트 생성. 오디오를 처리하고 조작하는 데 사용\n        setAudioContext(audioCtx);\n\n        audioCtx.audioWorklet.addModule('audioProcessor.js').then(() => {\n          // 파일을 오디오 워크렛으로 추가\n          const workletNode = new AudioWorkletNode(audioCtx, 'audio-processor'); // 노드가 오디어 데이터를 실시간으로 처리\n          const source = audioCtx.createMediaStreamSource(stream); // 오디오 스트림을 소스로 사용하여 컨텍스트에 연결할 오디오 소스 생성\n          source.connect(workletNode); // 오디오 소스를 오디오 프로세서 노드에 연결\n          workletNode.connect(audioCtx.destination); // 오디오 프로세서를 오디오 컨텍스트의 대상에 연결. 오디오 처리 결과가 스피커로 출력\n        });\n      } catch (error) {\n        if (error.name === 'NotAllowedError' || error.name === 'AbortError') {\n          // 사용자가 액세스를 거부하거나 취소한 경우 처리할 로직\n          console.error('User denied microphone access');\n          alert('Please allow access to microphone to record audio.');\n        } else {\n          console.error('Error accessing microphone:', error);\n        }\n      }\n    };\n\n    startListening();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return;\n};\n\nexport default AudioRecorder;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAElD,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGJ,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACK,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACO,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACxC,IAAIS,KAAK;EACT,IAAIC,qBAAqB;EAEzBX,SAAS,CAAC,MAAM;IACd,MAAMY,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACF,MAAMC,MAAM,GAAG,MAAMC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;UACvDC,KAAK,EAAE;QACT,CAAC,CAAC,CAAC,CAAC;QACJ,MAAMC,QAAQ,GAAG,IAAIC,YAAY,CAAC,CAAC,CAAC,CAAC;QACrCd,eAAe,CAACa,QAAQ,CAAC;QAEzBA,QAAQ,CAACE,YAAY,CAACC,SAAS,CAAC,mBAAmB,CAAC,CAACC,IAAI,CAAC,MAAM;UAC9D;UACA,MAAMC,WAAW,GAAG,IAAIC,gBAAgB,CAACN,QAAQ,EAAE,iBAAiB,CAAC,CAAC,CAAC;UACvE,MAAMO,MAAM,GAAGP,QAAQ,CAACQ,uBAAuB,CAACb,MAAM,CAAC,CAAC,CAAC;UACzDY,MAAM,CAACE,OAAO,CAACJ,WAAW,CAAC,CAAC,CAAC;UAC7BA,WAAW,CAACI,OAAO,CAACT,QAAQ,CAACU,WAAW,CAAC,CAAC,CAAC;QAC7C,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACd,IAAIA,KAAK,CAACC,IAAI,KAAK,iBAAiB,IAAID,KAAK,CAACC,IAAI,KAAK,YAAY,EAAE;UACnE;UACAC,OAAO,CAACF,KAAK,CAAC,+BAA+B,CAAC;UAC9CG,KAAK,CAAC,oDAAoD,CAAC;QAC7D,CAAC,MAAM;UACLD,OAAO,CAACF,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;QACrD;MACF;IACF,CAAC;IAEDjB,cAAc,CAAC,CAAC;IAChB;EACF,CAAC,EAAE,EAAE,CAAC;EAEN;AACF,CAAC;AAACT,EAAA,CAvCID,aAAa;AAAA+B,EAAA,GAAb/B,aAAa;AAyCnB,eAAeA,aAAa;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
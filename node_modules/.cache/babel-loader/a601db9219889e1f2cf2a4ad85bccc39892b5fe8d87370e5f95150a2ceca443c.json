{"ast":null,"code":"var _jsxFileName = \"/Users/chae-jeongwon/github/kiosk/src/pages/TestPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction QueryComponent() {\n  _s();\n  const [history, setHistory] = useState([]);\n  const [prompt, setPrompt] = useState(\"\");\n  const promptRef = useRef(null); // Ref 생성\n\n  useEffect(() => {\n    startListening();\n  }, []);\n  let recording = false; // recording 변수 정의\n  let lastAudioDetectedTime; // lastAudioDetectedTime 변수 정의\n\n  async function startRecording(stream) {\n    try {\n      // 미디어 레코더 생성\n      const recorder = new MediaRecorder(stream);\n      const chunks = []; // 녹음된 오디오 데이터를 저장할 배열\n\n      // 녹음 데이터가 준비되면 발생하는 이벤트 핸들러\n      recorder.ondataavailable = event => {\n        chunks.push(event.data);\n      };\n\n      // 녹음이 멈추면 발생하는 이벤트 핸들러\n      recorder.onstop = async () => {\n        try {\n          // 녹음된 오디오 데이터를 하나의 Blob으로 합치기\n          const blob = new Blob(chunks, {\n            type: \"audio/wav\"\n          });\n\n          // FormData에 오디오 데이터 추가\n          const formData = new FormData();\n          formData.append(\"audio\", blob);\n\n          // 서버로 오디오 데이터 전송\n          const response = await fetch(\"{URL}\", {\n            method: \"POST\",\n            body: formData\n          });\n\n          // 서버 응답 처리\n          const data = await response.json();\n          console.log(\"Transcripts:\", data.transcripts);\n          // 서버 응답에 따라 작업 수행\n        } catch (error) {\n          console.error(\"Error in mediaRecorder.onstop:\", error);\n        }\n      };\n\n      // 녹음 시작\n      recorder.start();\n    } catch (error) {\n      console.error(\"Error starting recording:\", error);\n    }\n  }\n  async function startListening() {\n    try {\n      // 마이크 접근 권한 요청 및 스트림 받기\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n\n      // 스트림으로부터 음성 감지 및 녹음 시작\n      const audioContext = new AudioContext();\n      const source = audioContext.createMediaStreamSource(stream);\n      const processor = audioContext.createScriptProcessor(1024, 1, 1);\n      processor.onaudioprocess = function (event) {\n        const inputData = event.inputBuffer.getChannelData(0);\n        const bufferLength = inputData.length;\n        let sum = 0;\n        for (let i = 0; i < bufferLength; i++) {\n          sum += Math.abs(inputData[i]);\n        }\n        const average = sum / bufferLength;\n        if (average > 0.01 && !recording) {\n          // 음성이 감지되고 녹음 중이 아닌 경우에만 녹음 시작\n          startRecording(stream);\n        } else if (average <= 0.01 && recording) {\n          // 음성이 감지되지 않고 녹음 중인 경우에 녹음 종료\n          lastAudioDetectedTime = Date.now(); // 마지막으로 음성이 감지된 시간 기록\n        }\n      };\n      source.connect(processor);\n      processor.connect(audioContext.destination);\n    } catch (error) {\n      console.error(\"Error accessing microphone:\", error);\n    }\n  }\n  startListening(); // 페이지 로드 시 음성 감지 시작\n\n  async function handleSubmit(event) {\n    event.preventDefault();\n    const dateTime = new Date();\n    const time = dateTime.toLocaleTimeString();\n\n    // 사용자의 입력을 즉시 표시\n    setHistory(prevHistory => [...prevHistory, {\n      user: prompt,\n      time\n    }]);\n\n    // 입력 필드 초기화\n    setPrompt(\"\");\n    // Ref를 사용하여 입력 필드 초기화\n    promptRef.current.value = \"\";\n\n    // 서버로부터 응답 받기\n    try {\n      // Fetch 로직...\n      console.log();\n    } catch (error) {\n      console.error(\"Error in fetch:\", error);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container p-3\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"ChatGPT Clone\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Press and hold the spacebar to record audio. Release the spacebar to stop recording.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      id: \"response\",\n      children: history.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chat-message ${entry.user ? \"user-message\" : \"bot-message\"}`,\n        children: entry.user ? entry.user : entry.bot\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"d-flex align-items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex-grow-1 me-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"prompt\",\n            className: \"form-label\",\n            children: \"Prompt:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            className: \"form-control\",\n            id: \"prompt\",\n            name: \"prompt\",\n            rows: \"3\",\n            ref: promptRef // Ref 할당\n            ,\n            onChange: event => setPrompt(event.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn btn-primary\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n}\n_s(QueryComponent, \"hFnZUO0QtpsTWPuOHnAvvE6cXAM=\");\n_c = QueryComponent;\nexport default QueryComponent;\nvar _c;\n$RefreshReg$(_c, \"QueryComponent\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","QueryComponent","_s","history","setHistory","prompt","setPrompt","promptRef","startListening","recording","lastAudioDetectedTime","startRecording","stream","recorder","MediaRecorder","chunks","ondataavailable","event","push","data","onstop","blob","Blob","type","formData","FormData","append","response","fetch","method","body","json","console","log","transcripts","error","start","navigator","mediaDevices","getUserMedia","audio","audioContext","AudioContext","source","createMediaStreamSource","processor","createScriptProcessor","onaudioprocess","inputData","inputBuffer","getChannelData","bufferLength","length","sum","i","Math","abs","average","Date","now","connect","destination","handleSubmit","preventDefault","dateTime","time","toLocaleTimeString","prevHistory","user","current","value","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","map","entry","index","bot","onSubmit","htmlFor","name","rows","ref","onChange","target","_c","$RefreshReg$"],"sources":["/Users/chae-jeongwon/github/kiosk/src/pages/TestPage.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\n\nfunction QueryComponent() {\n  const [history, setHistory] = useState([]);\n  const [prompt, setPrompt] = useState(\"\");\n  const promptRef = useRef(null); // Ref 생성\n\n  useEffect(() => {\n    startListening();\n  }, []);\n  let recording = false; // recording 변수 정의\n  let lastAudioDetectedTime; // lastAudioDetectedTime 변수 정의\n\n  async function startRecording(stream) {\n    try {\n      // 미디어 레코더 생성\n      const recorder = new MediaRecorder(stream);\n      const chunks = []; // 녹음된 오디오 데이터를 저장할 배열\n\n      // 녹음 데이터가 준비되면 발생하는 이벤트 핸들러\n      recorder.ondataavailable = (event) => {\n        chunks.push(event.data);\n      };\n\n      // 녹음이 멈추면 발생하는 이벤트 핸들러\n      recorder.onstop = async () => {\n        try {\n          // 녹음된 오디오 데이터를 하나의 Blob으로 합치기\n          const blob = new Blob(chunks, { type: \"audio/wav\" });\n\n          // FormData에 오디오 데이터 추가\n          const formData = new FormData();\n          formData.append(\"audio\", blob);\n\n          // 서버로 오디오 데이터 전송\n          const response = await fetch(\"{URL}\", {\n            method: \"POST\",\n            body: formData,\n          });\n\n          // 서버 응답 처리\n          const data = await response.json();\n          console.log(\"Transcripts:\", data.transcripts);\n          // 서버 응답에 따라 작업 수행\n        } catch (error) {\n          console.error(\"Error in mediaRecorder.onstop:\", error);\n        }\n      };\n\n      // 녹음 시작\n      recorder.start();\n    } catch (error) {\n      console.error(\"Error starting recording:\", error);\n    }\n  }\n\n  async function startListening() {\n    try {\n      // 마이크 접근 권한 요청 및 스트림 받기\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n\n      // 스트림으로부터 음성 감지 및 녹음 시작\n      const audioContext = new AudioContext();\n      const source = audioContext.createMediaStreamSource(stream);\n      const processor = audioContext.createScriptProcessor(1024, 1, 1);\n\n      processor.onaudioprocess = function (event) {\n        const inputData = event.inputBuffer.getChannelData(0);\n        const bufferLength = inputData.length;\n        let sum = 0;\n        for (let i = 0; i < bufferLength; i++) {\n          sum += Math.abs(inputData[i]);\n        }\n        const average = sum / bufferLength;\n        if (average > 0.01 && !recording) {\n          // 음성이 감지되고 녹음 중이 아닌 경우에만 녹음 시작\n          startRecording(stream);\n        } else if (average <= 0.01 && recording) {\n          // 음성이 감지되지 않고 녹음 중인 경우에 녹음 종료\n          lastAudioDetectedTime = Date.now(); // 마지막으로 음성이 감지된 시간 기록\n        }\n      };\n\n      source.connect(processor);\n      processor.connect(audioContext.destination);\n    } catch (error) {\n      console.error(\"Error accessing microphone:\", error);\n    }\n  }\n\n  startListening(); // 페이지 로드 시 음성 감지 시작\n\n  async function handleSubmit(event) {\n    event.preventDefault();\n\n    const dateTime = new Date();\n    const time = dateTime.toLocaleTimeString();\n\n    // 사용자의 입력을 즉시 표시\n    setHistory((prevHistory) => [...prevHistory, { user: prompt, time }]);\n\n    // 입력 필드 초기화\n    setPrompt(\"\");\n    // Ref를 사용하여 입력 필드 초기화\n    promptRef.current.value = \"\";\n\n    // 서버로부터 응답 받기\n    try {\n      // Fetch 로직...\n      console.log();\n    } catch (error) {\n      console.error(\"Error in fetch:\", error);\n    }\n  }\n\n  return (\n    <div className=\"container p-3\">\n      <h3>ChatGPT Clone</h3>\n      <p>\n        Press and hold the spacebar to record audio. Release the spacebar to\n        stop recording.\n      </p>\n\n      <div className=\"chat-container\" id=\"response\">\n        {history.map((entry, index) => (\n          <div\n            key={index}\n            className={`chat-message ${\n              entry.user ? \"user-message\" : \"bot-message\"\n            }`}\n          >\n            {entry.user ? entry.user : entry.bot}\n          </div>\n        ))}\n      </div>\n\n      <div className=\"chat-input\">\n        <form onSubmit={handleSubmit} className=\"d-flex align-items-center\">\n          <div className=\"flex-grow-1 me-2\">\n            <label htmlFor=\"prompt\" className=\"form-label\">\n              Prompt:\n            </label>\n            {/* Ref를 사용하여 입력 필드에 접근 */}\n            <textarea\n              className=\"form-control\"\n              id=\"prompt\"\n              name=\"prompt\"\n              rows=\"3\"\n              ref={promptRef} // Ref 할당\n              onChange={(event) => setPrompt(event.target.value)}\n            ></textarea>\n          </div>\n          <button type=\"submit\" className=\"btn btn-primary\">\n            Submit\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default QueryComponent;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}